CREATE TABLE users (
    id_user SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    cedula VARCHAR(20) NOT NULL UNIQUE,
    tel VARCHAR(20),
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE suites (
	id_suite SERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	price DECIMAL(10,2)NOT NULL,
	capacity INT NOT NULL,
	count INT NOT  NULL,
    description TEXT,
    image_gallery TEXT[]
);

CREATE TABLE suite_date(
	id_suite INT NOT NULL,
	date_reservation DATE NOT NULL,
	available_suites INT NOT NULL,
	PRIMARY KEY (id_suite, date_reservation),
	FOREIGN KEY (id_suite) REFERENCES suites(id_suite)
);

CREATE TABLE reservations(
	id_reservation SERIAL PRIMARY KEY,
	id_suite INT NOT NULL, 
	id_user INT NOT NULL,
	date_reservation DATE NOT NULL,

	FOREIGN KEY (id_suite) REFERENCES suites(id_suite),
	FOREIGN KEY (id_user) REFERENCES users(id_user)
);

INSERT INTO users (name, lastname, cedula, tel, email, password)
VALUES ('John', 'Doe', '1234567890', '555-1234', 'john.doe@example.com', '12345');

select * from users

insert into suites(name, price, capacity, count)
VALUES('Suite Deluxe', 150.00, 5, 10)

select * from suites

CREATE OR REPLACE FUNCTION verifyAvailable(p_date_reservation DATE, p_id_suite INT)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
DECLARE
    availables INT;
BEGIN
    SELECT available_suites INTO availables
    FROM suite_date
    WHERE suite_date.date_reservation = p_date_reservation AND suite_date.id_suite = p_id_suite;
    
    IF availables > 0 OR availables IS NULL THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$;

	
CREATE OR REPLACE PROCEDURE sp_reservate(p_id_suite INT, p_id_user INT, p_date_reservation DATE)
LANGUAGE plpgsql
AS $$
DECLARE
    available INT;
BEGIN
    IF verifyAvailable(p_date_reservation) THEN
        INSERT INTO reservations(id_suite, id_user, date_reservation)
        VALUES(p_id_suite, p_id_user, p_date_reservation);
    ELSE
        RAISE NOTICE 'NO AVAILABLE FOR %.', p_date_reservation;
        RETURN;
    END IF;
    
    IF EXISTS (SELECT 1 FROM suite_date WHERE suite_date.date_reservation = p_date_reservation AND suite_date.id_suite = p_id_suite) THEN
        UPDATE suite_date
        SET available_suites = available_suites - 1
        WHERE suite_date.date_reservation = p_date_reservation AND suite_date.id_suite = p_id_suite;
    ELSE
        SELECT count INTO available FROM suites WHERE id_suite = p_id_suite;    
        INSERT INTO suite_date(id_suite, date_reservation, available_suites)
        VALUES(p_id_suite, p_date_reservation, available-1);
    END IF;
END;
$$;

CREATE OR REPLACE PROCEDURE sp_deleteReservation(id_res INT)
LANGUAGE plpgsql
AS $$
DECLARE
	date_res DATE;
	p_id_suite INT;
	available INT;
	count_suite INT;
BEGIN
	SELECT date_reservation, id_suite into date_res, p_id_suite
	FROM reservations
	WHERE id_reservation = id_res;
	
    DELETE FROM reservations WHERE id_reservation = id_res;
	SELECT count INTO count_suite FROM suites WHERE id_suite = p_id_suite;
	SELECT available_suites INTO available FROM suite_date WHERE date_reservation = date_res;
	
	IF EXISTS (SELECT 1 FROM suite_date WHERE suite_date.date_reservation = date_res AND suite_date.id_suite = p_id_suite) THEN
	 	IF (count_suite = available+1) THEN
		 DELETE FROM suite_date WHERE id_suite = p_id_suite;
		ELSE
			UPDATE suite_date
    		SET available_suites = available_suites + 1
    		WHERE suite_date.date_reservation = date_res AND suite_date.id_suite = p_id_suite;  
		END IF;
    END IF;
		
END;
$$;

CALL sp_reservate(1,1,'2024-1-20')

select * from reservations;
select * from suite_date
select * from suites